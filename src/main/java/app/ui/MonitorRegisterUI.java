/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app.ui;

import alert_button.AlertButtonMonitor;
import app.AlreadyHaveMonitorAttachedException;
import app.ObserverManager;
import app.SmartMonitors;
import app.connector.*;
import app.observers.AlertButtonObserverImpl;
import app.observers.SmartTrackerObserverImpl;
import blood_pressure.BloodPressureMonitor;
import data_center.entities.Patient;
import heart_rate.HeartRateMonitor;
import smart_tracker.SmartTrackerConfig;
import smart_tracker.SmartTrackerMonitor;
import smart_tracker.SmartTrackerPermission;
import temperature_monitor.TemperatureMonitor;

import javax.swing.*;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

/**
 *
 * @author wmespindula
 */
public class MonitorRegisterUI extends DisposableJFrame {

    private Patient patient;
    private DisposableJFrame newMonitorUI;

    /**
     * Creates new form MainUI
     */
    public MonitorRegisterUI(Patient patient) {
        initComponents();

        this.patient = patient;

        Arrays.stream(SmartMonitors.values())
                .forEach(smartMonitor -> monitorTypeSelector.addItem(smartMonitor.getName()));
        refreshAvailableMonitorsByType(monitorTypeSelector.getSelectedItem());

    }

    private void refreshAvailableMonitorsByType(Object selectedItem) {
        SmartMonitors type = Arrays.stream(SmartMonitors.values()).filter(item  -> item.getName().equals(selectedItem))
                .findFirst().get();
        switch (type){
            case HEART_RATE:
                HeartRateConnector heartRateConnector = HeartRateConnector.getInstance();
                List<String> heartRateMonitors = heartRateConnector.findAllNotUsed().stream()
                                    .map(item -> item.getCode().toString())
                                    .collect(Collectors.toList());
                availableSensorsList.setListData(heartRateMonitors.toArray(new String[heartRateMonitors.size()]));
                break;


            case BLOOD_PRESSURE:
                BloodPressureConnector bloodPressureConnector = BloodPressureConnector.getInstance();
                List<String> bloodPressureMonitors = bloodPressureConnector.findAllNotUsed().stream()
                        .map(item -> item.getCode().toString())
                        .collect(Collectors.toList());
                availableSensorsList.setListData(bloodPressureMonitors.toArray(new String[bloodPressureMonitors.size()]));
                break;


            case SMART_TRACKER:
                SmartTrackerConnector smartTrackerConnector = SmartTrackerConnector.getInstance();
                List<String> smartTrackerMonitor = smartTrackerConnector.findAllNotUsed().stream()
                        .map(item -> item.getCode().toString())
                        .collect(Collectors.toList());
                availableSensorsList.setListData(smartTrackerMonitor.toArray(new String[smartTrackerMonitor.size()]));
                break;

            case TEMPERATURE_MONITOR:
                TemperatureConnector temperatureConnector = TemperatureConnector.getInstance();
                List<String> temperatureMonitors = temperatureConnector.findAllNotUsed().stream()
                        .map(item -> item.getCode().toString())
                        .collect(Collectors.toList());
                availableSensorsList.setListData(temperatureMonitors.toArray(new String[temperatureMonitors.size()]));
                break;

            default:
                availableSensorsList.setListData(new String[]{});
                break;

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        availableSensorsList = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        monitorTypeSelector = new javax.swing.JComboBox<>();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(8, 0), new java.awt.Dimension(8, 0), new java.awt.Dimension(8, 32767));
        addMonitorButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Adicionar Monitor Ã  Paciente");
        jLabel1.setVerifyInputWhenFocusTarget(false);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));
        jPanel1.add(jPanel2);

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));
        jPanel1.add(jPanel3);

        availableSensorsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(availableSensorsList);

        jLabel2.setText("Tipo de Sensor:");

        monitorTypeSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monitorTypeSelectorActionPerformed(evt);
            }
        });

        addMonitorButton.setText("Adicionar Monitor");
        addMonitorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMonitorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addMonitorButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 0, 0)
                                .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(monitorTypeSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel2))
                    .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monitorTypeSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addMonitorButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void monitorTypeSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monitorTypeSelectorActionPerformed
        refreshAvailableMonitorsByType(monitorTypeSelector.getSelectedItem());
    }//GEN-LAST:event_monitorTypeSelectorActionPerformed

    private void addMonitorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMonitorButtonActionPerformed

        SmartMonitors type = Arrays.stream(SmartMonitors.values()).filter(item  -> item.getName().equals(monitorTypeSelector.getSelectedItem()))
                .findFirst().get();


        switch (type){
            case HEART_RATE:
                HeartRateConnector heartRateConnector = HeartRateConnector.getInstance();
                Long heartRateMonitorValue = Long.parseLong(availableSensorsList.getSelectedValue());
                HeartRateMonitor heartRateMonitor = heartRateConnector.getByCode(heartRateMonitorValue).get();
                if (newMonitorUI == null || newMonitorUI.isDisposed()){
                    newMonitorUI = new HeartRateRegisterUI(this, patient, heartRateMonitor);
                    newMonitorUI.setVisible(true);
                }
                break;


            case BLOOD_PRESSURE:
                BloodPressureConnector bloodPressureConnector = BloodPressureConnector.getInstance();
                Long bloodPressureMonitorValue = Long.parseLong(availableSensorsList.getSelectedValue());
                BloodPressureMonitor bloodPressureMonitor = bloodPressureConnector.
                        getByCode(bloodPressureMonitorValue).get();
                if (newMonitorUI == null || newMonitorUI.isDisposed()){
                    newMonitorUI = new BloodPressureRegisterUI(this, patient, bloodPressureMonitor);
                    newMonitorUI.setVisible(true);
                }
                break;


            case SMART_TRACKER:
                SmartTrackerConnector smartTrackerConnector = SmartTrackerConnector.getInstance();
                Long smartTrackerMonitorValue = Long.parseLong(availableSensorsList.getSelectedValue());
                SmartTrackerMonitor smartTrackerMonitor = smartTrackerConnector.
                        getByCode(smartTrackerMonitorValue).get();
                registerSmartTracker(smartTrackerMonitor);
                break;

            case TEMPERATURE_MONITOR:
                TemperatureConnector temperatureConnector = TemperatureConnector.getInstance();
                Long temperatureMonitorValue = Long.parseLong(availableSensorsList.getSelectedValue());
                TemperatureMonitor temperatureMonitor = temperatureConnector.getByCode(temperatureMonitorValue).get();
                if (newMonitorUI == null || newMonitorUI.isDisposed()){
                    newMonitorUI = new TemperatureMonitorRegisterUI(this, patient, temperatureMonitor);
                    newMonitorUI.setVisible(true);
                }

            case EMERGENCY_BUTTON:
                AlertButtonConnector alertConnector = AlertButtonConnector.getInstance();
                Long alertMonitorValue = Long.parseLong(availableSensorsList.getSelectedValue());
                AlertButtonMonitor alertButtonMonitor = alertConnector.getByCode(alertMonitorValue).get();
                registerEmergencyButton(alertButtonMonitor);
                break;

            default:
                availableSensorsList.setListData(new String[]{});
                break;

        }
    }//GEN-LAST:event_addMonitorButtonActionPerformed

    private void registerEmergencyButton(AlertButtonMonitor alertButtonMonitor) {
        AlertButtonObserverImpl alertButtonObserver = new AlertButtonObserverImpl(patient.getPatientId(), alertButtonMonitor.getCode());
        ObserverManager observerManager = ObserverManager.getInstance();

        try {
            observerManager.add(alertButtonObserver);

            AlertButtonConnector connector = AlertButtonConnector.getInstance();
            connector.attachPatientToMonitor(patient, alertButtonMonitor.getCode(),
                    alertButtonObserver);

            JOptionPane.showMessageDialog(this, "Monitor configurado ao paciente com sucesso!",
                    "Configurado!", JOptionPane.INFORMATION_MESSAGE);

        } catch (AlreadyHaveMonitorAttachedException e) {
            JOptionPane.showMessageDialog(this, "BotÃ£o de EmergÃªncia jÃ¡ estÃ¡ registrado ao paciente!");
            e.printStackTrace();
        }
        this.dispose();
    }

    private void registerSmartTracker(SmartTrackerMonitor smartTrackerMonitor) {
        SmartTrackerConfig smartTrackerConfig = new SmartTrackerConfig();
        smartTrackerConfig.setPermission(SmartTrackerPermission.PATIENT);
        SmartTrackerObserverImpl smartTrackerObserver = new SmartTrackerObserverImpl(patient.getPatientId(), smartTrackerMonitor.getCode());
        ObserverManager observerManager = ObserverManager.getInstance();

        try {
            observerManager.add(smartTrackerObserver);

            SmartTrackerConnector connector = SmartTrackerConnector.getInstance();
            connector.attachPatientToMonitor(patient, smartTrackerMonitor.getCode(),
                    smartTrackerObserver, smartTrackerConfig);

            JOptionPane.showMessageDialog(this, "Monitor configurado ao paciente com sucesso!",
                    "Configurado!", JOptionPane.INFORMATION_MESSAGE);

        } catch (AlreadyHaveMonitorAttachedException e) {
            JOptionPane.showMessageDialog(this, "Sensor de Pulso jÃ¡ estÃ¡ registrado ao paciente!");
            e.printStackTrace();
        }
        this.dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addMonitorButton;
    private javax.swing.JList<String> availableSensorsList;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> monitorTypeSelector;
    // End of variables declaration//GEN-END:variables
}
