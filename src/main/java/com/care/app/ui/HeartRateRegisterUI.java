/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.care.app.ui;

import com.care.app.AlreadyHaveMonitorAttachedException;
import com.care.app.ObserverManager;
import com.care.app.connector.HeartRateConnector;
import com.care.app.observers.HeartRateObserverImpl;
import com.care.data_center.entities.Patient;
import com.care.heart_rate.HeartRateConfig;
import com.care.heart_rate.HeartRateMonitor;
import com.care.heart_rate.HeartRateState;

import javax.swing.*;

/**
 * @author wmespindula
 */
public class HeartRateRegisterUI extends LinkedDisposableJFrame {

    private final Patient patient;
    private final HeartRateMonitor heartRateMonitor;

    /**
     * Creates new form BloodPressureRegister
     */
    public HeartRateRegisterUI(DisposableJFrame previousJFrame, Patient patient, HeartRateMonitor heartRateMonitor) {
        super(previousJFrame);
        this.patient = patient;
        this.heartRateMonitor = heartRateMonitor;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        minHeartRateTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        maxHeartRateTextField = new javax.swing.JTextField();
        registerButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Defina os limites de Batimento Cardíaco");

        jLabel2.setText("Batimento Cardíaco Mínimo:");

        jLabel3.setText("Batimento Cardíaco Máxima:");

        registerButton.setText("Registrar");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(registerButton))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(maxHeartRateTextField)
                                                        .addComponent(minHeartRateTextField))))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(minHeartRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(maxHeartRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                                .addComponent(registerButton)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        HeartRateConfig heartRateConfig = getHeartRateConfigFromForm();
        HeartRateObserverImpl heartRateObserver = new HeartRateObserverImpl(patient.getPatientId(), heartRateMonitor.getCode());
        ObserverManager observerManager = ObserverManager.getInstance();

        if (heartRateConfig != null) {
            try {
                observerManager.add(heartRateObserver);

                HeartRateConnector connector = HeartRateConnector.getInstance();
                connector.attachPatientToMonitor(patient, heartRateMonitor.getCode(),
                        heartRateObserver, heartRateConfig);

                JOptionPane.showMessageDialog(this, "Monitor configurado ao paciente com sucesso!",
                        "Configurado!", JOptionPane.INFORMATION_MESSAGE);

            } catch (AlreadyHaveMonitorAttachedException e) {
                JOptionPane.showMessageDialog(this, "Sensor de Batimentos Cardíacos já está registrado ao paciente!");
                e.printStackTrace();
            }
            this.dispose();
        }
    }//GEN-LAST:event_registerButtonActionPerformed

    private HeartRateConfig getHeartRateConfigFromForm() {
        String heartRateMinString = minHeartRateTextField.getText();
        String heartRateMaxString = maxHeartRateTextField.getText();

        try {
            Integer heartRateMin = Integer.parseInt(heartRateMinString);
            Integer heartRateMax = Integer.parseInt(heartRateMaxString);

            HeartRateConfig config = new HeartRateConfig();

            HeartRateState minState = new HeartRateState();
            minState.setHeartRate(heartRateMin);

            HeartRateState maxState = new HeartRateState();
            maxState.setHeartRate(heartRateMax);

            config.setMinState(minState);
            config.setMaxState(maxState);

            return config;

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Os campos devem conter números inteiros positivos!",
                    "Erro no preenchimento do formulário", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        return null;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField maxHeartRateTextField;
    private javax.swing.JTextField minHeartRateTextField;
    private javax.swing.JButton registerButton;
    // End of variables declaration//GEN-END:variables
}
